import arcade

SPRITE_SCALING = 0.25

SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720

MOVEMENT_SPEED = 5
FRAME = 0
LAST_FRAME = 0
CHANGE_LEFT = True
CHANGE_RIGHT = True
class Bunny(arcade.Sprite):

    def __init__(self):
        super().__init__()

        # Load a left facing texture and a right facing texture.
        # mirrored=True will mirror the image we load.
        self.texture_left = arcade.load_texture("images/rabbit1.png", mirrored=True, scale=SPRITE_SCALING)
        self.texture_right = arcade.load_texture("images/rabbit1.png", scale=SPRITE_SCALING)
        self.texture_left1 = arcade.load_texture("images/rabbit2.png", mirrored=True, scale=SPRITE_SCALING)
        self.texture_right1 = arcade.load_texture("images/rabbit2.png", scale=SPRITE_SCALING)
        # By default, face right.
        self.texture = self.texture_right

    def update(self):
        global FRAME, LAST_FRAME, CHANGE_LEFT,CHANGE_RIGHT
        self.center_x += self.change_x
        self.center_y += self.change_y
        print(FRAME)
        # Figure out if we should face left or right
        if self.change_x < 0:
            if CHANGE_LEFT:
                self.texture = self.texture_left1
            else:
                self.texture = self.texture_left
            if FRAME%30==0:
                CHANGE_LEFT = not CHANGE_LEFT
            
        if self.change_x > 0:
            if CHANGE_RIGHT:
                self.texture = self.texture_right1
            else:
                self.texture = self.texture_right
            if FRAME%30==0:
                CHANGE_RIGHT = not CHANGE_RIGHT

        if self.left < 0:
            self.left = 0
        elif self.right > SCREEN_WIDTH - 1:
            self.right = SCREEN_WIDTH - 1

        if self.bottom < 0:
            self.bottom = 0
        elif self.top > SCREEN_HEIGHT - 1:
            self.top = SCREEN_HEIGHT - 1
        LAST_FRAME = FRAME
        FRAME +=1

class WorldWindow(arcade.Window):
    """
    Main application class.
    """

    def __init__(self, width, height):
        """
        Initializer
        """

        # Call the parent class initializer
        super().__init__(width, height)

        # Variables that will hold sprite lists
        self.all_sprites_list = None

        # Set up the Bunny info
        self.Bunny_sprite = None
        self.score = 0

        # Set the background color
        arcade.set_background_color(arcade.color.AMAZON)

    def setup(self):
        """ Set up the game and initialize the variables. """

        # Sprite lists
        self.all_sprites_list = arcade.SpriteList()
        self.wall_list = arcade.SpriteList()
        # Set up the Bunny
        self.score = 0
        self.Bunny_sprite = Bunny()
        self.Bunny_sprite.center_x = SCREEN_WIDTH / 2
        self.Bunny_sprite.center_y = 315
        #self.Bunny_sprite.center_y = SCREEN_HEIGHT / 2
        self.all_sprites_list.append(self.Bunny_sprite)

        for x in range(173, 650, 64):
            wall = arcade.Sprite("images/floor.png", 1)
            wall.center_x = x
            wall.center_y = 200
            self.all_sprites_list.append(wall)
            self.wall_list.append(wall)


    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        arcade.start_render()

        # Draw all the sprites.
        self.all_sprites_list.draw()

    def update(self, delta_time):
        """ Movement and game logic """

        # Call update on all sprites (The sprites don't do much in this
        # example though.)
        self.all_sprites_list.update()

    def on_key_press(self, key, modifiers):
        """Called whenever a key is pressed. """

        if key == arcade.key.UP:
            self.Bunny_sprite.change_y = MOVEMENT_SPEED
        elif key == arcade.key.DOWN:
            self.Bunny_sprite.change_y = -MOVEMENT_SPEED
        elif key == arcade.key.LEFT:
            self.Bunny_sprite.change_x = -MOVEMENT_SPEED
        elif key == arcade.key.RIGHT:
            self.Bunny_sprite.change_x = MOVEMENT_SPEED

    def on_key_release(self, key, modifiers):
        """Called when the user releases a key. """

        #if key == arcade.key.UP or key == arcade.key.DOWN:
            #self.Bunny_sprite.change_y = 0
        #elif
        if key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.Bunny_sprite.change_x = 0


def main():
    """ Main method """
    window = WorldWindow(SCREEN_WIDTH, SCREEN_HEIGHT)
    window.setup()
    arcade.run()

if __name__ == "__main__":
    main()